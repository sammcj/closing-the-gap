---
// src/pages/index.astro
import Layout from "../layouts/Layout.astro";
import Chart from "../components/Chart.astro";
import SummaryGraph from "../components/SummaryGraph.astro";
import { getDataFromDB } from "../utils/db";
import { CONFIG } from "../config";
import dayjs from "dayjs";

let data;
let error;

try {
  data = getDataFromDB();
} catch (e) {
  console.error("Error reading from database:", e);
  error = e.message;
}

function preprocessBenchmarkData(benchmarkData) {
  if (!benchmarkData || benchmarkData.length === 0) return [];

  const uniqueDates = new Set(benchmarkData.map((d) => d.date));

  if (uniqueDates.size === 1) {
    // If all data points are on the same date, spread them out slightly
    const baseDate = dayjs(benchmarkData[0].date);
    return benchmarkData.map((d, index) => ({
      ...d,
      date: baseDate.add(index, "hour").format("YYYY-MM-DD HH:mm:ss"),
    }));
  }

  return benchmarkData;
}

const processedData = data
  ? {
      benchmarks: data.benchmarks
        .map((benchmark) => {
          const benchmarkResults = data.results.filter(
            (result) => result.benchmarkId === benchmark.id
          );

          if (benchmarkResults.length === 0) return null;

          const processedResults = benchmarkResults
            .map((result) => {
              const model = data.models.find((m) => m.name === result.modelName);
              return model
                ? {
                    date: result.date,
                    name: model.name,
                    openClosed: model.openClosed,
                    score: result.score,
                  }
                : null;
            })
            .filter((item) => item !== null);

          const preprocessedResults = preprocessBenchmarkData(processedResults);

          return {
            name: benchmark.name,
            data: preprocessedResults,
          };
        })
        .filter((benchmark) => benchmark !== null && benchmark.data.length > 0),
    }
  : null;

// Calculate combined average data
const combinedData = processedData
  ? processedData.benchmarks.flatMap((benchmark) => benchmark.data)
  : null;

// Process data for the summary graph
const summaryData = processedData
  ? processedData.benchmarks.flatMap((benchmark) =>
      benchmark.data.map((d) => ({
        benchmark: benchmark.name,
        date: d.date,
        name: d.name,
        openClosed: d.openClosed,
        score: d.score,
      }))
    )
  : null;

const benchmarkNames = processedData ? processedData.benchmarks.map((b) => b.name) : [];

console.log("Processed data:", processedData);
console.log("Combined data:", combinedData);
console.log("Summary data:", summaryData);

// Function to count unique dates in a benchmark's data
function countUniqueDates(benchmark) {
  return new Set(benchmark.data.map((d) => d.date.split(" ")[0])).size; // Only consider the date part
}

// Filter out benchmarks without data and sort them based on the amount of usable data
const sortedBenchmarks = processedData
  ? processedData.benchmarks
      .filter((benchmark) => {
        const hasData = benchmark.data.length > 0;
        const hasMultipleDates = countUniqueDates(benchmark) >= 2;
        console.log(
          `Benchmark ${benchmark.name}: hasData=${hasData}, hasMultipleDates=${hasMultipleDates}`
        );
        return hasData;
      })
      .sort((a, b) => {
        const aUniqueDates = countUniqueDates(a);
        const bUniqueDates = countUniqueDates(b);
        if (bUniqueDates !== aUniqueDates) {
          return bUniqueDates - aUniqueDates;
        }
        return b.data.length - a.data.length;
      })
  : [];

console.log(
  "Sorted and filtered benchmarks:",
  sortedBenchmarks.map((b) => ({
    name: b.name,
    dataPoints: b.data.length,
    uniqueDates: countUniqueDates(b),
    sampleData: b.data.slice(0, 3), // Show first 3 data points as a sample
  }))
);
---

<Layout title="LLM Benchmark Dashboard">
  <main class="container mx-auto px-4 py-8 max-w-full">
    <h1 class="text-4xl font-bold mb-8 text-center text-gray-800">LLM Benchmark Dashboard</h1>
    {
      error ? (
        <p class="text-red-500 text-center">Error loading data: {error}</p>
      ) : sortedBenchmarks.length > 0 ? (
        <div class="space-y-12">
          <div class="bg-white shadow-lg rounded-lg overflow-hidden p-4">
            <h2 class="text-2xl font-bold mb-4">Benchmark Progress Summary</h2>
            <SummaryGraph data={summaryData} benchmarks={benchmarkNames} />
          </div>
          {combinedData && combinedData.length > 0 && (
            <div class="bg-white shadow-lg rounded-lg overflow-hidden">
              <Chart
                id="combined-chart"
                title={CONFIG.combinedChartTitle}
                data={combinedData}
                isCombined={true}
              />
            </div>
          )}
          <div class="grid grid-cols-1 xl:grid-cols-2 gap-4">
            {sortedBenchmarks.map((benchmark, index) => (
              <div class="bg-white shadow-lg rounded-lg overflow-hidden">
                <Chart id={`chart-${index}`} title={benchmark.name} data={benchmark.data} />
              </div>
            ))}
          </div>
        </div>
      ) : (
        <p class="text-center text-gray-600">
          No data available to display. Check console for more information.
        </p>
      )
    }
  </main>
</Layout>

<style>
  body {
    background-color: #f0f4f8;
  }
</style>

<script>
  // (Previous script content remains unchanged)
</script>
