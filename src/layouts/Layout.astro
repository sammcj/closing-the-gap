---
// src/layouts/Layout.astro
import Sidebar from "../components/Sidebar.astro";

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div class="flex">
      <Sidebar />
      <div class="flex-grow pl-[60px] transition-all duration-100 ease-in-out" id="main-content">
        <slot />
      </div>
    </div>
  </body>
</html>
<style is:global>
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    color: #3498db; /* or any color you prefer */
  }
  @font-face {
    font-family: "Helvetica Neue";
    src: local("Helvetica Neue");
    font-weight: 400;
    font-style: normal;
    font-display: swap;
  }
  @font-face {
    font-family: "Helvetica Neue";
    src: local("Helvetica Neue");
    font-weight: 600;
    font-style: normal;
    font-display: swap;
  }
  @font-face {
    font-family: "Helvetica Neue";
    src: local("Helvetica Neue");
    font-weight: 900;
    font-style: normal;
    font-display: swap;
  }

  :root {
    --font-family: "Helvetica Neue", sans-serif;
    --background-color: #f0f4f8;
    --text-color: #333;
    --primary-color: #3498db;
    --secondary-color: #2ecc71;
    --accent-color: #e74c3c;
  }
  html {
    font-family: var(--font-family);
    background-color: var(--background-color);
    color: var(--text-color);
  }
  body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  .container {
    width: 100%;
    max-width: 1600px;
    margin: 0 auto;
  }
  .chart {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }
  .chart:hover {
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
  }
</style>

<script>
  const sidebar = document.getElementById("sidebar");
  const mainContent = document.getElementById("main-content");

  if (sidebar && mainContent) {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === "attributes" && mutation.attributeName === "class") {
          if (sidebar.classList.contains("collapsed")) {
            mainContent.classList.remove("pl-[300px]");
            mainContent.classList.add("pl-[60px]");
          } else {
            mainContent.classList.remove("pl-[60px]");
            mainContent.classList.add("pl-[300px]");
          }
        }
      });
    });

    observer.observe(sidebar, { attributes: true });
  }
</script>
